"""
Copyright (c) {{ cookiecutter.__year }} {{ cookiecutter.full_name }}. All rights reserved.

{{ cookiecutter.project_name }}: {{ cookiecutter.project_short_description }}
"""

import pybamm
import numpy as np

# Extra dependencies may be imported here.


# PyBaMM ships with many parameter sets for a variety of chemistries, such as
# lead-acid and lithium-ion parameter sets. For more information plus details
# on how to create your own parameter sets, refer to the PyBaMM documentation
# on parameter sets at
# https://docs.pybamm.org/en/latest/source/api/parameters/parameter_sets.html

# Note: the file must contain a function "get_parameter_values" that returns a
# dictionary for PyBaMM to recognise it as a parameter set. A sample function
# is provided for you at the end of this file.

# A sample function for operations on scalar parameters is provided for you
# below, defined using pybamm.Parameter objects. It returns the rate of decay
# of the SEI layer as a function of the total SEI thickness.

def SEI_limited_dead_lithium_OKane2022(L_sei):
    """
    Decay rate for dead lithium formation [s-1].

    References
    ----------
    :footcite:t:`OKane2022`

    Parameters
    ----------
    L_sei : :class:`pybamm.Symbol`
        Total SEI thickness [m]

    Returns
    -------
    :class:`pybamm.Symbol`
        Dead lithium decay rate [s-1]
    """

    gamma_0 = pybamm.Parameter("Dead lithium decay constant [s-1]")
    L_inner_0 = pybamm.Parameter("Initial inner SEI thickness [m]")
    L_outer_0 = pybamm.Parameter("Initial outer SEI thickness [m]")
    L_sei_0 = L_inner_0 + L_outer_0

    gamma = gamma_0 * L_sei_0 / L_sei

    return gamma


# The function below is listed for you as an entry point in pyproject.toml so
# that it can be used as a parameter set for experiments using PyBaMM. You may
# add more functions to describe calculations and other functionality.

# This function must return the parameter values from any defined functions as
# well as the values for any scalar parameters.

def get_parameter_values():
    """
    Example docstring for a third-party parameter set titled `my_parameters`.

    References
    ----------
    Add references to the relevant papers here in this format, to be parsed by
    sphinxcontrib.bibtex in the documentation through a CITATIONS.bib file. You
    may refer to the documentation for this extension at
    https://sphinxcontrib-bibtex.readthedocs.io/en/latest/

    :footcite:t:`van1995python`

    """

    # Return the relevant parameter values such as those for positive and negative
    # electrodes, electrolytes, experiments, and citations here.
    return {
        # Chemistry
        "chemistry": "lithium_ion",
        # SEI parameters
        "Initial inner SEI thickness [m]": 0.0,
        "Initial outer SEI thickness [m]": 5e-09,
        # Lithium plating
        "Dead lithium decay rate [s-1]": SEI_limited_dead_lithium_OKane2022,
        # List of citation keys for the papers that define the parameter values
        "citations": ["van1995python", "OKane2022"],
        # ...and so on
    }

# You may see any of the parameter sets that ship with PyBaMM for examples of how
# to define parameter values in Python files. For example, the parameter set for
# an Enertech cell (Ai2020) is defined in this file:
# https://github.com/pybamm-team/PyBaMM/blob/develop/pybamm/input/parameters/lithium_ion/Ai2020.py. # noqa: E501
