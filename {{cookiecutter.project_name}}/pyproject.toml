[build-system]
{%- if cookiecutter.backend == "hatch" %}
requires = ["hatchling"]
build-backend = "hatchling.build"
{%- endif %}

[project]
name = "{{ cookiecutter.project_name }}"
authors = [
  { name = "{{ cookiecutter.full_name }}", email = "{{ cookiecutter.email }}" },
]
{%- if cookiecutter.org | lower == "pybamm-team" %}
maintainers = [
  { name = "PyBaMM Team", email = "pybamm@pybamm.org" },
]
{%- endif %}
description = "{{ cookiecutter.project_short_description }}"
readme = "README.md"
requires-python = ">=3.8"  # PyBaMM supports 3.8 and above
classifiers = [
  "Development Status :: 1 - Planning",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
{%- if cookiecutter.license == "BSD" %}
  "License :: OSI Approved :: BSD License",
{%- elif cookiecutter.license == "Apache" %}
  "License :: OSI Approved :: Apache Software License",
{%- elif cookiecutter.license == "MIT" %}
  "License :: OSI Approved :: MIT License",
{%- endif %}
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",  # PyBaMM supports >=3.8,<3.12
  "Topic :: Scientific/Engineering",
]
{%- if cookiecutter.backend == "hatch" %}
dynamic = ["version"]
{%- endif %}
dependencies = ["pybamm"]

[project.optional-dependencies]
dev = [
  "pytest >=6",
  "pytest-cov >=3",
  "nox",
  "pre-commit",
]
docs = [
  "sphinx",
  "pydata_sphinx_theme",
  "sphinx_design",
  "sphinx-copybutton",
  "myst-parser",
  "sphinx-inline-tabs",
  "sphinxcontrib-bibtex",
  "sphinx-autobuild",
  "sphinx-last-updated-by-git",
  "nbsphinx",
  "ipython",
  "sphinx-gallery",
]

[project.urls]
Homepage = "{{ cookiecutter.url }}"
"Bug Tracker" = "{{ cookiecutter.url }}/issues"
Discussions = "{{ cookiecutter.url }}/discussions"
Changelog = "{{ cookiecutter.url }}/releases"

{%- if cookiecutter.parameter_set == "True" %}
[project.entry-points.pybamm_parameter_sets]
my_parameters = "src.{{ cookiecutter.__project_slug }}.my_parameters:get_parameter_values"
{%- endif %}

{%- if cookiecutter.backend == "hatch" %}
[tool.hatch]
version.path = "src/{{ cookiecutter.__project_slug }}/__init__.py"
envs.default.dependencies = [
  "pybamm",
]
{%- endif %}

[tool.coverage]
run.source = ["{{ cookiecutter.__project_slug }}"]
port.exclude_lines = [
  'pragma: no cover',
]

[tool.ruff]
select = [
  "E", "F", "W", # flake8
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "ISC",         # flake8-implicit-str-concat
  "G",           # flake8-logging-format
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "PTH",         # flake8-use-pathlib
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "T20",         # flake8-print
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
  "EXE",         # flake8-executable
  "NPY",         # NumPy specific rules
  "PD",          # pandas-vet
]
extend-ignore = [
  "PLR",    # Design related pylint codes
  "E501",   # Line too long
]
src = ["src"]
unfixable = [
  "T20",  # Removes print statements
  "F841", # Removes unused variables
]
exclude = []
flake8-unused-arguments.ignore-variadic-names = true

[tool.ruff.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]
