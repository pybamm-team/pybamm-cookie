[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "pybamm-cookiecutter"
authors = [
  { name = "Agriya Khetarpal", email = "agriyakhetarpal@outlook.com" },
]
maintainers = [
  { name = "PyBaMM Team", email = "pybamm@pybamm.org" },
]
description = "A template for creating battery modeling projects based on PyBaMM"
readme = "README.md"
requires-python = ">=3.8"  # PyBaMM supports 3.8 and above
classifiers = [
  "Development Status :: 1 - Planning",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: BSD License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",  # PyBaMM supports >=3.8,<3.12
  "Topic :: Scientific/Engineering",
  "Typing :: Typed",
]
dynamic = ["version"]
dependencies = ["pybamm", "cookiecutter"]

[project.optional-dependencies]
dev = [
  "pytest >=6",
  "pytest-cov >=3",
  "nox[uv]",
  "pre-commit",
  "pytest-cookies",
]
docs = [
  "sphinx",
  "pydata_sphinx_theme",
  "sphinx_design",
  "sphinx-copybutton",
  "myst-parser",
  "sphinx-inline-tabs",
  "sphinxcontrib-bibtex",
  "sphinx-autobuild",
  "sphinx-last-updated-by-git",
  "nbsphinx",
  "ipython",
  "sphinx-gallery",
]

[project.urls]
Homepage = "https://github.com/pybamm-team/pybamm-cookiecutter"
"Bug Tracker" = "https://github.com/pybamm-team/pybamm-cookiecutter/issues"
Discussions = "https://github.com/pybamm-team/pybamm-cookiecutter/discussions"
Changelog = "https://github.com/pybamm-team/pybamm-cookiecutter/releases"

[tool.hatch]
version.source = "vcs"
build.hooks.vcs.version-file = "src/pybamm_cookiecutter/_version.py"
envs.default.dependencies = [
  "pybamm",
]

[tool.mypy]
packages = [
  "src/pybamm_cookiecutter",
  "tests"
]
python_version = "3.8"
strict = true
warn_return_any = false
show_error_codes = true
enable_error_code = [
  "ignore-without-code",
  "truthy-bool",
  "redundant-expr",
]
disallow_untyped_defs = false
disallow_untyped_calls = false

[tool.coverage]
run.source = ["pybamm_cookiecutter"]
port.exclude_lines = [
  'pragma: no cover',
]

[tool.ruff]
select = [
  "E", "F", "W", # flake8
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "ISC",         # flake8-implicit-str-concat
  "G",           # flake8-logging-format
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "PTH",         # flake8-use-pathlib
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "T20",         # flake8-print
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
  "EXE",         # flake8-executable
  "NPY",         # NumPy specific rules
  "PD",          # pandas-vet
]
src = ["src"]
exclude = []
isort.required-imports = ["from __future__ import annotations"]
flake8-unused-arguments.ignore-variadic-names = true
